coarse_module:
    backbone: 
        type  : "basic_encoder"
        kwargs:
            output_dim: 256
            norm_fn   : "instance"
    head:
        type: "fdr"
        kwargs: null

refine_module:
    backbone: 
        type  : "basic_encoder"
        kwargs:
            output_dim: 256
            norm_fn   : "instance"
    head:
        type: "fdr"
        kwargs: null

fourier_converter:
    beta_train: 0.06
    beta_test : 0.008

# size of target image
target_size: [768, 1088]

# grid size
grid_size: [31, 31]

train: True 

ckpt_path: null

debug: True

paths: 
    root_dir  : ${oc.env:PROJECT_ROOT}
    data_dir  : /content/WarpDoc
    log_dir   : ${paths.root_dir}/logs/
    output_dir: ${paths.root_dir}/checkpoints/de_wrapper

trainer:
    default_root_dir: ${paths.output_dir}

    min_epochs: 1 # prevents early stopping
    max_epochs: 100

    accelerator: gpu
    devices: 1
    num_nodes: 1

    # mixed precision for extra speed-up
    # precision: 16

    # perform a validation loop every N training epochs
    check_val_every_n_epoch: 1

    # set True to to ensure deterministic results
    # makes training slower but gives more reproducibility than just setting seeds
    deterministic: False
    benchmark: True

    accumulate_grad_batches: 1
    gradient_clip_val: 1.0
    precision: 32
    num_sanity_val_steps: 0
    limit_train_batches: 1.0
    limit_val_batches: 1.0
    sync_batchnorm: null
    strategy: auto 

loss: 
    coarse: 
        type: "ssim"
    refine: 
        type: "ssim"
    mutual: 
        enable: True
        type  : "ssim"
        weight: 0.5 

dataloader:
    batch: 2
    num_workers: 2
    pin_memory: True

dataset:
    brightness: 0.25
    constrast: 0.25
    sharpness: 0.25
    blur: 0.4
    geometry: 0.25
    color_jiter: 0.25

callbacks:
    model_checkpoint:  
        dirpath: ${paths.output_dir}
        filename: "epoch_{epoch:03d}"
        monitor: "step" #"val/mAP"
        mode: "max"
        save_last: True
        auto_insert_metric_name: False
        verbose: False # verbosity mode
        save_top_k: -1 # save k best models (determined by above metric)
        save_weights_only: False # if True, then only the modelâ€™s weights will be saved
        every_n_train_steps: null # number of training steps between checkpoints
        train_time_interval: null # checkpoints are monitored at the specified time interval
        every_n_epochs: 1 # number of epochs between checkpoints
        save_on_train_epoch_end: True # whether to run checkpointing at the end of the training epoch or the end of validation

    model_summary:
        max_depth: 1

    tqdm_progress_bar:
        refresh_rate: 1

    learning_rate_monitor:
        _target_: lightning.pytorch.callbacks.LearningRateMonitor

    timer:
        _target_: lightning.pytorch.callbacks.Timer
    
    ema:
      decay: 0.9999
      cpu_offload: False
      validate_original_weights: False
      every_n_steps: 1

logger:
    tensorboard:
        save_dir: "${paths.output_dir}/tensorboard/"
        version: 0